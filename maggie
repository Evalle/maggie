#!/usr/bin/python
# global imports
import sys
import argparse
import time
from configparser import SafeConfigParser
from splinter import Browser

class Colors:

    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    END = '\033[0m'

blue = Colors.BLUE
green = Colors.GREEN
yellow = Colors.YELLOW
red = Colors.RED
end = Colors.END

# config parser
parser = SafeConfigParser()
parser.read('maggie.config')

if parser.has_option('credentials', 'username') and parser.has_option('credentials', 'password') and \
        parser.has_option('portus', 'version'):
    username = parser.get('credentials', 'username')
    password = parser.get('credentials', 'password')
    version = parser.get('portus', 'version')
    repaddr = parser.get('portus', 'repaddress')
else:
    print('You need to configure maggie.config first')
    sys.exit(1)

# argument parser
parser = argparse.ArgumentParser(description="Portus autotestsuite, run it via 'maggie -a <address> -p <port>'")
parser.add_argument('address',
        help = "portus address, for example 192.168.0.2")
parser.add_argument('port',
        help = "portus port, for example 80, 3000")
args = parser.parse_args()
user_address = args.address
user_port = args.port

startTime = time.time()

browser = Browser('phantomjs', service_args=['--ignore-ssl-errors=true', '--ssl-protocol=any'])
browser.driver.set_window_size(1920 ,1080)
url = "https://" + user_address + ":" + user_port 
browser.visit(url)

# authentication on the main portus page
#xpath_username = '//*[@id="user_username"]'
#xpath_password = '//*[@id="user_password"]'
#browser.find_by_xpath(xpath_username).first.fill(username)
#browser.find_by_xpath(xpath_password).first.fill(password)
#browser.find_by_name('button').first.click()
browser.find_by_id('user_username').first.fill(username)
browser.find_by_id('user_password').first.fill(password)
browser.find_by_name('button').first.click()

# main class
class Checker(object):

    def __init__(self, browser):
        
        self.browser = browser
        self.errors = 0
        self.success = 0

    def chktext(self, text):
        """ check if text is present and visible on the page """ 
        if self.browser.is_text_present(text):
            print("%-40s %s" % (text, green + 'PASSED' + end))
            self.success += 1
        else:
            print("%-40s %s" % (text, red + 'FAILED' + end))
            self.errors += 1
    
    def openpage(self, link, text):
        """ open new page in the same window, and check if some text 
        exists """ 
        self.browser.click_link_by_partial_href(link)
        self.chktext(text)
    
    def clicklink(self, link):
        """ click on particular link on the web page """
        self.browser.click_link_by_partial_href(link)
    
    def findlink(self, link):
        """ find particular element on the page """
        if  self.browser.find_link_by_partial_href(link):
            print("%-40s %s" % (link, green + 'PASSED' + end))
            self.success += 1
        else:
            print("%-40s %s" % (link, red + 'FAILED' + end))
            self.errors += 1

def section_output(uline, title): 
    """ print the name of the section plus divided line """ 
    print()
    print(title)
    print(len(title) * uline)

### test runners
ck = Checker(browser)

# check if version of portus is correct (see .conf file for more info
section_output('*', 'Portus version')
ck.chktext(version)

# check every available section on the left side of the main page 
section_output('*', 'Main page tests')
ck.chktext(username)
for i,k in (('/', 'Recent activities'), 
        ('/namespaces', 'Special namespaces'),
        ('/teams', 'Teams you are member of'), 
        ('/admin/dashboard', 'Recent activities')):
    try:
        ck.openpage(i, k)
    except:
        browser.driver.save_screenshot('screenshot.png')
# go back to the main page
ck.clicklink('/')

# check Repositories section on the main page
section_output('*', 'Repositories section tests')
ck.chktext('Repositories')
for link in ('#all', '#starred', '#personal'):
    ck.findlink(link)

section_output('*', 'Summary')
print(blue + 'Ran: ' + str(ck.errors + ck.success) + ' tests' + end)
print(green + 'Successes: ' + str(ck.success) + end)
print(red + 'Errors: ' + str(ck.errors) + end)
print(yellow + 'It took: {0:0.1f} seconds'.format(time.time() - startTime) + end) 

